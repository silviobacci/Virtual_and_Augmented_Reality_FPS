#define PLAYER_SPEED 		0.07
#define PLAYER_SPEED_STEP 	0.001
#define PLAYER_ANGLE_STEP 	0.01
#define SWAT_START_WALK 	16
#define SWAT_END_WALK 		48
#define SWAT_TOTAL_FRAMES 	32
#define SWAT_FRAME_STEP 	0.35
#define CLIP_SIZE 			500
#define PLAYER_RADIUS		30
#define VISCOUS_PLAYER 		6* PI* VISCOSITY_COEFF * PLAYER_RADIUS  / PLAYER_MASS
#define PLAYER_MASS			80
#define JUMP_FORCE 			15000
#define JUMP_ANGLE 			0

class player{
	//Player-related 
	var mesh_player_lower;
	var mesh_player_upper;
	var mesh_gun;
	
	var obj_player_lower;
	var obj_player_upper;
	var obj_gun;
	var obj_player;
	
	var position;
	var angle_direction;
	var moving_direction;
	var current_frame; 
	var id;
	var color;
	var speed;
	
	//jump related 
	var isjumping;
	var elapsed_time;
	var dx;
	var dy;
	var accx;
	var accy;
	var speedx;
	var speedy; 
	var angle;
	var delta_t;
	
	//Player-associated
	var my_railgun; 
	
	init(i,c,p);
	init_meshes();
	
	get_position();
	
	shoot();
	init_jump_dynamic();
	update_jump_dynamics();
	resetJumpDynamics();
	check_collision();
	update_speed_position();
	turnings();
	update(matrix_level);
	
	draw();
};

function player::init_meshes(){
	mesh_player_lower = CVmNewMesh("swat_lower.aam");
	mesh_player_lower.ModulateMaterials(color);
	var sf1 =mesh_player_lower.Normalize(1);
	
	mesh_player_upper = CVmNewMesh("swat_upper.aam"); 
	mesh_player_upper.ModulateMaterials(color);
	mesh_player_upper.scale(sf1);
	
	
	mesh_gun = CVmNewMesh("rocketl.aam");
	mesh_gun.scale(sf1);	
}

function player::init(i, c, p){
	position = p;
	speed= 0.0;
	angle_direction = 0;
	moving_direction = [sin(angle_direction), 0 , cos(angle_direction)]; 
	id = i;
	color = c;
	
	delta_t = 1.0 / FRAME_SECOND;
	isjumping = false;
	elapsed_time = 0.0; 
	
	speedx = 0.0;
	speedy = 0.0;
	dx = 0.0; 
	dy = 0.0;

    init_meshes();
	obj_gun = CVmObj(mesh_gun);

	obj_player_upper = CVmObj(mesh_player_upper);
	obj_player_lower = CVmObj(mesh_player_lower);
	obj_player = CVmObj();
	
	obj_player.AddChild(obj_player_lower);
	obj_player.AddChild(obj_player_upper);
	obj_player_upper.AddChild(obj_gun);
	obj_player_upper.setPivotPoint(0,0,0);
	obj_player.setposition(position);
	
	my_railgun = railgun();
	my_railgun.init(position, moving_direction, color);
	
	current_frame = 0;
}

function player::get_position(){
	return obj_player.GetPosition();
}

function player::resetJumpDynamics(){
	accx = 0.0;
	accy = 0.0;
	speedx = 0.0;
	speedy = 0.0;
	dx = 0.0;
	dy = 0.0;
}

function player::init_jump_dynamic(){	
	speedx = speed;

	if(speed > 0)
		angle = GRAD_TO_RAD * 45;
	else
		angle = GRAD_TO_RAD * 90;
		
	accx =  JUMP_FORCE/PLAYER_MASS * cos(angle);
	accy =  JUMP_FORCE/PLAYER_MASS * sin(angle) - ACCEL_GRAVITY;
	isjumping = true;
	
}

function player::update_jump_dynamics(){
	speedx += accx * delta_t; 
	speedy += accy * delta_t;
		
	dx = delta_t * speedx;
	dy = delta_t * speedy;
		
	angle = atan(dy/dx);
	position[0] += moving_direction[0] * dx;
	position[1] += dy;
	position[2] += moving_direction[2] * dx;
	
	if(position[1] <= 0){
			isjumping = false; 
		position[1] = 0;
		resetJumpDynamics();
	}
	
	accx = - VISCOUS_PLAYER / PLAYER_MASS * sqrt(speedx^2 + speedy^2) * cos(angle);
	accy = - VISCOUS_PLAYER / PLAYER_MASS * sqrt(speedx^2 + speedy^2) * sin(angle) - ACCEL_GRAVITY ;
}

function player::shoot(){
	my_railgun.shoot(position, moving_direction);
}

function player::turnings(){
	if(my_keyboard.is_pressed(VK_LEFT))						
		angle_direction += PLAYER_ANGLE_STEP;
	else if(my_keyboard.is_pressed(VK_RIGHT))
		angle_direction -= PLAYER_ANGLE_STEP;	
}

function player::check_collision(){
	var bb1 = mesh_player_upper.GetBoundingBox();
	var bb2 = mesh_player_lower.GetBoundingBox();
	
	var c = array(8);
	
	c[0] = position + [bb1[0], 	0, 	bb2[5]];
	c[1] = position + [0,     	0, 	bb2[5]];
	c[2] = position + [bb1[3],	0, 	bb2[5]];
	c[3] = position + [bb1[3],	0, 	0];
	c[4] = position + [bb1[3],	0, 	bb2[2]];
	c[5] = position + [0,		0, 	bb2[2]];
	c[6] = position + [bb1[0],	0, 	bb2[2]];
	c[7] = position + [bb1[0],	0, 	0];
	
	for (var i = 0; i < 8; i++){
		var ix = int(c[i].x);
		var iz = int(c[i].z);
		if(my_world.matrix[iz][ix] == 1) 
			return true;
	}

	// obj_player.SetPosition(position);
	// obj_player.SetRotation(RAD_TO_GRAD * angleY, [0, 1, 0]);
	return false;
}

function player::update_speed_position(){
	if(my_keyboard.is_pressed(VK_W)){
		if(speed < PLAYER_SPEED)
			speed += PLAYER_SPEED_STEP;
	}
	else if(my_keyboard.is_pressed(VK_S)){
		if(speed > -PLAYER_SPEED/2)
			speed -= 2*PLAYER_SPEED_STEP;
	}
	else if(speed > 0)
		speed -= PLAYER_SPEED_STEP;
	else if(speed < 0)
		speed += PLAYER_SPEED_STEP;
		
	if(abs(speed) < 0.001)
		speed = 0;
	
	if(speed > 0)
		current_frame = (current_frame + SWAT_FRAME_STEP *(0.95 + speed))% SWAT_TOTAL_FRAMES;
	else if (speed < 0){
		current_frame = (current_frame - SWAT_FRAME_STEP *(0.95 + speed))% SWAT_TOTAL_FRAMES;
		if(current_frame <= 0)
			current_frame += SWAT_TOTAL_FRAMES;
	}	

	position += speed * moving_direction;
}

function player::update(matrix_level) {
	var run = 1; 
	var old_position = position;

	if(my_keyboard.is_pressed(VK_SHIFT )){
		shoot();
	}
	else if(my_keyboard.is_pressed(VK_A)){						
		var dir_ortho =[moving_direction[2], 0, -moving_direction[0]];
		position += PLAYER_SPEED * dir_ortho * run;	
	}
	else if(my_keyboard.is_pressed(VK_D)){
		var dir_ortho =[-moving_direction[2], 0, moving_direction[0]];
		position += PLAYER_SPEED * dir_ortho * run;	
	}
	
	if(!isjumping)
		update_speed_position();
		
	if(check_collision()){
		position = old_position;
		speed = 0;
	}
	
	if(my_keyboard.is_pressed(VK_SPACE) && !isjumping)
		init_jump_dynamic();
	
	if(isjumping)
		update_jump_dynamics();

	obj_player.setposition(position);
	
	my_railgun.update();
	
	//obj_player.setRotation(RAD_TO_GRAD * angle_direction, [0,1,0]);
}

function player::draw(){											
	obj_player.draw(VR_FRAMENUMBER, SWAT_START_WALK + current_frame);
	my_railgun.draw();
}