#define BULLET_SPEED 5       
#define BULLET_MASS	0.008
#define BULLET_RADIUS 0.003
#define SHOOT_FORCE 80
#define SHOOT_ANGLE 0
#define ACCEL_GRAVITY 9.81
#define VISCOSITY_COEFF 0.0000186
#define FRAME_SECOND	60
#define VISCOUS_BULLET 6* PI* VISCOSITY_COEFF * BULLET_RADIUS  / BULLET_MASS
//#define RAD_TO_GRAD		PI/180
	

class bullet{
	var mesh_bullet;
	var obj_bullet;
	var position;
	var dir;
	var color; 

	var isflying;
	var elapsed_time;
	var dx;
	var dy;
	
	var accx;
	var accy;
	var speedx;
	var speedy; 
	
	var angle;

	var delta_t;
	
	init(p,d,c);
	update();
	draw();
	shoot(p,d);
	computeDynamics();
	resetDynamics();
};

function bullet::computeDynamics(){
	accx 	-= VISCOUS_BULLET* abs(speedx) * cos(angle);
	accy 	-=  ACCEL_GRAVITY +VISCOUS_BULLET *abs(speedy)* sin(angle);

	speedx	+= accx * delta_t;//elapsed_time;
	speedy	+= accy * delta_t;//elapsed_time;
	
	dx = delta_t * speedx;
	dy = delta_t * speedy;
	
	angle =GRAD_TO_RAD* atan(dy/dx);
	trace(accx);
	trace(accy);
	trace(dx);
	trace(dy);
	trace(speedx);
	trace(speedy);
	position[0] += dir[0] * dx;
	position[1] +=  dy;
	position[2] += dir[2] * dx;

}


function bullet::shoot(p,d){
	position = p + [0,1,0];
	dir = d; 
	dir=d;
	angle = dir[1]*(90);
	
	accx =  SHOOT_FORCE/BULLET_MASS * cos(GRAD_TO_RAD*angle);
	accy =  SHOOT_FORCE/BULLET_MASS* sin(GRAD_TO_RAD*angle);
	
	isflying = true;
}

function bullet::init(p,d,c){
	
	delta_t = 1.0/FRAME_SECOND;
	isflying = false;
	elapsed_time = 0.0; 
	position=p;
	
	color=c;
	mesh_bullet= CVmnewMesh(VRP_BOX);
	mesh_bullet.scale(0.2);
	mesh_bullet.ModulateMaterials(color);
	obj_bullet = CVmObj(mesh_bullet);
	obj_bullet.SetPosition(position);
	speedx = 0.0;
	speedy = 0.0;
	dx = 0.0; 
	dy = 0.0;
}

function bullet::draw(){
	if(isflying)
	  obj_bullet.draw();
}

function bullet::update(){
	
	if(isflying){
		computeDynamics();
		
		obj_bullet.setposition(position);
		if(position[1] <= 0)
			isflying = false; 
			
	}
	
}