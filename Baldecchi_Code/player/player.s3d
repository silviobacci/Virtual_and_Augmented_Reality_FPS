#define PLAYER_SPEED 0.03
#define PLAYER_ANGLE_STEP 0.01
#define SWAT_START_WALK 16
#define SWAT_END_WALK 48
#define SWAT_TOTAL_FRAMES 32
#define CLIP_SIZE 	1000

class player{
	//Player-related 
	var mesh_player_lower;
	var mesh_player_upper;
	var mesh_gun;
	
	var obj_player_lower;
	var obj_player_upper;
	var obj_gun;
	var obj_player;
	
	var position;
	var angleY;
	var angleView;
	var movingDirection;
	var shootingDirection;
	var current_frame; 
	var id;
	var color;
	var my_bullet; 
	var fx_shoot;
	var jump; 
	var bullets;
	
	//Player-associated
	var CurrentWeapon; 
	
	init(i,c,p);
	draw();
	update(matrix_level);
	turnings();
	movement(run);
	check_Collision(matrix_level);
	shoot(p,d);
	jump_check();
	updateAngle();
	updateAngleView();
	get_position();
};

function player::get_position(){
	return obj_player.GetPosition();
}

function updateAngleView(){
	
}

function player::shoot(p,d){
	if(bullets > 0){
		my_bullet[bullets-1].shoot(position, shootingDirection);
		bullets--;
		
	}
	//fx_shoot.setposition(position);
	//fx_shoot.setlistenerposition(cameragetposition());
	//fx_shoot.setlistenerorientation(-cameragetdirection());
	//fx_shoot.play();
}

function player::init(i,c,p){
	fx_shoot = CVmVRAWav("shoot.wav",true);    //the second param is to enable 3d sound effect
	position= p;
	angleY = 0;
	angleView = 0;
	movingDirection = [sin(angleY), 0 , cos(angleY)]; 
	shootingDirection = movingDirection;
	id=i;
	color=c;
	bullets= CLIP_SIZE ;
	
	         //We have to rotate -90 on the x(because of clockwise)
	//var bb = mesh_player_lower.GetBoundingBox();
	//trace(bb);

    initPlayerMeshes(&mesh_player_upper,&mesh_player_lower, &mesh_gun,color);
	obj_gun = CVmObj(mesh_gun);
	
						//to correctly attach meshes
	
							
	
	obj_player_upper = CVmObj(mesh_player_upper);			//player's object
	obj_player_lower = CVmObj(mesh_player_lower);
	obj_player = CVmObj();
	
	
	obj_player.AddChild(obj_player_lower);						//objects hierarchy
	obj_player.AddChild(obj_player_upper);
	obj_player_upper.AddChild(obj_gun);
	obj_player_upper.setPivotPoint(0,0,0);
	obj_player.setposition(position);
	
	my_bullet= array( CLIP_SIZE );
	for(var i=0; i < bullets; i++){
		var b = bullet();
	    b.init(position,shootingDirection,color);			//pos e dir actully not neebuded
	   my_bullet[i] = b;
	}
	current_frame= 0;										//player's movement
	jump=0;
}

function player::draw(){											
	obj_player.Draw(VR_FRAMENUMBER, SWAT_START_WALK+current_frame);
	foreach(var b in my_bullet)
		b.draw();
}

function player::turnings(){
	if(keypressed(VK_LEFT))						
		angleY += PLAYER_ANGLE_STEP;
	else if(keypressed(VK_RIGHT))
		angleY -= PLAYER_ANGLE_STEP;	
}

function player::check_Collision(block){
		
}

function player::movement(run){
	
}


function player::jump_check(){
		position.y=sin(jump);
		if(jump > PI/2)
			jump-=0.05;
		else
			jump-=0.045;	
}

function player::updateAngle(){
	angleY = asin(movingDirection[0]);
}

function player::update(matrix_level){			//update on key press
	var run=1; 
	var old_position = position;
	var pivot = obj_player.GetPivotPoint( ); 
	
	
	//if(keypressed(VK_SHIFT))					//speed
		//run=2;			//speed
	
	if(keypressed(VK_SHIFT )){
		shoot();
	}
	
	if(keypressed(VK_A)){						
		angleY += PLAYER_ANGLE_STEP;
		angleY = angleY % (2*PI);
		var a = asin(angleY);
	
		shootingDirection = [sin(angleY), 0 ,cos(angleY)];
		movingDirection = [sin(angleY), 0 ,cos(angleY)];	
		}
	else if(keypressed(VK_D)){
		angleY -= PLAYER_ANGLE_STEP;
		angleY = angleY % (2*PI);
		shootingDirection = [sin(angleY), 0 ,cos(angleY)];
		movingDirection = [sin(angleY), 0 ,cos(angleY)];	
		}										//player motion
	
	if(keypressed(VK_W)){
	
		var movingDir = [movingDirection[0],0,movingDirection[2]];
		position += PLAYER_SPEED * movingDir*run;	
		current_frame = (current_frame +0.35*run)%SWAT_TOTAL_FRAMES;
		
	}
	else if(keypressed(VK_S)){
		position -= PLAYER_SPEED * movingDirection*run;	
		current_frame = (current_frame -0.35*run)%SWAT_TOTAL_FRAMES;
		if(current_frame <= 0)
			current_frame+=SWAT_TOTAL_FRAMES;
		}
	
	if(jump > 0)
		jump_check();
	if(keypressed(VK_SPACE)){
		//shoot();
		jump=PI;	
	}

	var intx = int(position.x);
	var intz = int(position.z);
	
	
	if(matrix_level[intz][intx] == 1)
		position = old_position;	


	obj_player.setposition(position);			//obj updating
	
	//obj_player.setRotation(RAD_TO_GRAD * angleY, [0,1,0]);
	
	foreach (var i in my_bullet)
		i.update();
		
}