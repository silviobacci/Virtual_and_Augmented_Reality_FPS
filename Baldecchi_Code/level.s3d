#include "player.s3d"
#define FLOOR_TILING 5

class level								//Done by professor
{
	var mesh_floor;					//level.txt
	var material_floor; 
	var texture_floor;
	var matrix_level;
	var mesh_wall;
	var material_wall; 
	var texture_wall;
	var array_wall; 
	var array_player; 
	
	init();
	draw();
	addplayer(id, color,pos);
	update();
	
};
function level::update(){
	foreach(var i in array_player)
		i.update(matrix_level);
}
function level::addplayer(id, color,pos){
		var p = player();
		p.init(id, color,pos);
		aadd(array_player, p);
}

function level::init(){
	//floor creation
	mesh_floor=CVmNewMesh(VRP_BOX);
	mesh_floor.scale(32,1,32);
	mesh_floor.translate(0,-1,0);					//in order to set the box exactly align with the floor
 
	material_floor= CVmMaterial();					//creating the material
	material_floor.diffuse=[0,1,0,1];				//rgb and transparency
	material_floor.ChangeTextureParams(VR_U_TILING,FLOOR_TILING);
	material_floor.ChangeTextureParams(VR_V_TILING,FLOOR_TILING);            //tiling on both axis
	
	mesh_floor.ForceMaterial(material_floor);
	
	texture_floor= CVmTexture("MARMO.png");
	material_floor.setTexture(texture_floor);
	
	//wall creation
	mesh_wall=CVmNewMesh(VRP_BOX);
	mesh_wall.scale(1,3,1);           //height=3
	material_wall=CVmMaterial();
	material_wall.diffuse=[1,1,1,1];                   //blending with white is like multiplying all by one, nothing change
	material_floor.ChangeTextureParams(VR_V_TILING,3);		//3 is the scaling factor, is 3 because of line 60 (height=3)
	texture_wall= CVmTexture("mattoni04.png");
	mesh_wall.ForceMaterial(material_wall);
	material_wall.setTexture(texture_wall);
	
	//level creation
	var array_rows=LoadFile("level.txt");
	//trace(array_rows);						//allow to see variable in console window
	var array_rows_length=len(array_rows);
	var array_columns_length=len(array_rows[0]);
	//trace(array_rows_length);						//33 because of te carriage return row
	//trace(array_columns_length);
	array_wall=array(0);
	matrix_level= array(array_rows_length-1);
	for (var i=0; i < array_rows_length-1 ;i++){
		matrix_level[i]=array(array_columns_length);
		for(var j=0; j < array_columns_length ; j++){
			var tmp=array_rows[i][j];
			if(tmp == "*"){
				matrix_level[i][j] = 1;
				var tempobj=CVmObj(mesh_wall);
				tempobj.SetPosition(j,0,i);
				aadd(array_wall,tempobj);          //tmpobj is local but the array is global, the referements will exist as long as the array exists
			}
			else
				matrix_level[i][j] = 0;    //j is the x axis while i is the z
		}
	}
	//trace(matrix_level);
	array_player = array(0);
}

function level::draw(){
	mesh_floor.Draw();
	//mesh_wall.Draw();
	var l = len(array_wall);
	for(var i=0; i< l ; i++)
		array_wall[i].Draw();
//	foreach (var i in array_wall)				//another way
	//	i.Draw();
	foreach (var i in array_player)				//another way
		i.Draw();
}
