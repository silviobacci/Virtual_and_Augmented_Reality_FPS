
var CamPos = [0.0, 30, 30.0];
var CamDir; 

var switched_view = false; 
var is_first = false;
var last_mouse_x = 0.0; 
var last_mouse_y = 0.0;
var last_mouse_z = 0.0;
var last_deltax = 0;
var counter = 0;
var meshRot = 0.0 ;

//=====================================================================================================
function CameraMoveMouse()
//=====================================================================================================
{	
	var cam = CameraGetCurrent();
	var	rot_sensitivity = 0.001;		
	var deltax = Mouse.X;
	var deltay = Mouse.Y;
   
 	Mouse.SetStatus(0.5,0.5);
 	SetCursorPos(0.5,0.5);
	showCursor(false);
    if(deltax < (window_w/2)-8)
    	deltax *=-1;
    if(deltay < (window_h/2)-30)
     	deltay*=-1;

	cam.RotateGlobal(deltax * rot_sensitivity, 0, 1, 0);
	cam.RotateLocal (deltay * rot_sensitivity, 1, 0, 0);

	my_players.array_player[0].movingDirection = cam.GetDirection();
	my_players.array_player[0].shootingDirection = cam.GetDirection();
	meshRot += deltax;
	
	my_players.array_player[0].obj_player_upper.setRotation(-meshRot* rot_sensitivity, 0, 1, 0);
	my_players.array_player[0].obj_player_lower.setRotation(-meshRot* rot_sensitivity, 0, 1, 0);
}


function FirstPersonView(){
	CameraGetCurrent().SetPosition(my_players.array_player[0].obj_player.getPosition()+[0,FIRST_PERSON_HEIGHT,0] ); 	
	//CameraGetCurrent().SetDirection(CameraGetCurrent().GetDirection()+ getMouseMovement());
	//CameraGetCurrent().setPivotPoint(my_players.array_player[0].obj_player.getPivotPoint());
}

function BackSideView(){		
 	var pos =[-BACK_SIDE_WIDTH *my_players.array_player[0].movingDirection[0],BACK_SIDE_HEIGHT,-BACK_SIDE_WIDTH *my_players.array_player[0].movingDirection[2]];
 	CameraGetCurrent().SetPosition(my_players.array_player[0].obj_player.getPosition()+ pos);
 	CameraGetCurrent().SetDirection(my_players.array_player[0].movingDirection+[0, BACK_SIDE_ANGLE,0]);
}

function init_camera() {
	CamDir = CameraGetDirection();
	CameraGetCurrent().SetPosition(CamPos);
	CameraGetCurrent().SetDirection(CamDir);
}

function update_camera() {
	if(keypressed(VK_LCONTROL)){
    	is_first = !is_first;
    	switched_view = true;
  
    }
    	
	if(!is_first){
		BackSideView();
		
		if(switched_view){
			CameraGetCurrent().SetDirection(-CamDir);
			CameraGetCurrent().SetPosition(CamPos);
			switched_view = false; 
		}

	}
	else{
		firstPersonView();
    	CameraMoveMouse();
    }
}
