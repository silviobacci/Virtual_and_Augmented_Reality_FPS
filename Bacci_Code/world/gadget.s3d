#define ZONE_RAY					2
#define THERAPY_ZONE_PERIOD			2000
#define AMMUNITION_ZONE_PERIOD		2000

#define CAP_ZONE_COLOR				[255, 255, 255] / 255.0
#define CAP_ZONE_HEIGHT				0.2
#define THERAPY_ZONE_COLOR			[0, 255, 0] / 255.0
#define AMMUNITION_ZONE_COLOR		[0, 0, 255] / 255.0
#define ZONE_DIM					2
#define ZONE_HEIGHT					3

class gadget{
	var therapy_zone;
	var ammunition_zone;
	
	var is_in_therapy_zone;
	var is_in_ammunition_zone;
	
	var timer_therapy_zone;
	var timer_ammunition_zone;
	
	init();
	update();
	draw();
	
	create_therapy_zone(position);
	create_ammunition_zone(position);
	
	add_therapy_zone(position);
	add_ammunition_zone(position);
};

function gadget::create_therapy_zone(position) {
	glEnable(GL_BLEND);
	
	var mesh_therapy_zone = CVmNewMesh(VRP_CYLINDER);
	mesh_therapy_zone.scale(ZONE_DIM, ZONE_HEIGHT, ZONE_DIM);
	var material_therapy_zone = CVmMaterial();
	material_therapy_zone.diffuse = THERAPY_ZONE_COLOR; 
	material_therapy_zone.transparency = 0.3;
	mesh_therapy_zone.ForceMaterial(material_therapy_zone);
	
	var mesh_cap =  CVmNewMesh(VRP_CYLINDER);
	mesh_cap.scale(ZONE_DIM, CAP_ZONE_HEIGHT, ZONE_DIM);
	var material_cap = CVmMaterial();
	material_cap.diffuse = CAP_ZONE_COLOR; 
	mesh_cap.ForceMaterial(material_cap);
	
	var ret = array(0);
	var zone = CVmObj(mesh_therapy_zone);
	zone.SetPosition(position);
	aadd(ret, zone);
	
	zone = CVmObj(mesh_cap);
	zone.SetPosition(position + [0, ZONE_HEIGHT, 0]);
	aadd(ret, zone);
	
	return ret;
}

function gadget::create_ammunition_zone(position) {
	glEnable(GL_BLEND);
	
	var mesh_ammunition_zone = CVmNewMesh(VRP_CYLINDER);
	mesh_ammunition_zone.scale(ZONE_DIM, ZONE_HEIGHT, ZONE_DIM);
	var material_ammunition_zone = CVmMaterial();
	material_ammunition_zone.diffuse = AMMUNITION_ZONE_COLOR; 
	material_ammunition_zone.transparency = 0.3;
	mesh_ammunition_zone.ForceMaterial(material_ammunition_zone);
	
	var mesh_cap =  CVmNewMesh(VRP_CYLINDER);
	mesh_cap.scale(ZONE_DIM, CAP_ZONE_HEIGHT, ZONE_DIM);
	var material_cap = CVmMaterial();
	material_cap.diffuse = CAP_ZONE_COLOR; 
	mesh_cap.ForceMaterial(material_cap);
	
	var ret = array(0);
	var zone = CVmObj(mesh_ammunition_zone);
	zone.SetPosition(position);
	aadd(ret, zone);
	
	zone = CVmObj(mesh_cap);
	zone.SetPosition(position + [0, ZONE_HEIGHT, 0]);
	aadd(ret, zone);
	
	return ret;
}

function gadget::init(){
	therapy_zone = array(0);
	ammunition_zone = array(0);
}

function gadget::add_therapy_zone(position) {
	foreach(var zone in therapy_zone)
		if(zone[0] == position)
			return;
	var to_add = array(0);
	aadd(to_add, position);
	aadd(to_add, create_therapy_zone(position));
	aadd(to_add, false);
	aadd(therapy_zone, to_add);
}

function gadget::add_ammunition_zone(position) {
	foreach(var zone in ammunition_zone)
		if(zone[0] == position)
			return;
	var to_add = array(0);
	aadd(to_add, position);
	aadd(to_add, create_ammunition_zone(position));
	aadd(to_add, false);
	aadd(ammunition_zone, to_add);
}

function gadget::update() {
	foreach(var zone in therapy_zone) {
		if(zone[2] && getTime() - timer_therapy_zone > THERAPY_ZONE_PERIOD) {
			timer_therapy_zone = getTime();
			my_sound_player.play_gadget(zone[0]);
			if(my_players.get_me().life_points != STARTING_LP)
				my_players.get_me().life_points++;
		}
		var distance = sqrt((zone[0].x - my_players.get_me().position.x)^2 + (zone[0].z - my_players.get_me().position.z)^2);
		if(abs(distance) < ZONE_RAY) {
			if(!zone[2])
				timer_therapy_zone = getTime();
			zone[2] = true;
			break;
		}
		else
			zone[2] = false;
	}
	
	foreach(var zone in ammunition_zone) {
		if(zone[2] && getTime() - timer_ammunition_zone > AMMUNITION_ZONE_PERIOD) {
			timer_ammunition_zone = getTime();
			my_sound_player.play_gadget(zone[0]);
			my_players.get_me().current_weapon.add_bullets(25);
		}
		var distance = sqrt((zone[0].x - my_players.get_me().position.x)^2 + (zone[0].z - my_players.get_me().position.z)^2);
		if(abs(distance) < ZONE_RAY) {
			if(!zone[2])
				timer_ammunition_zone = getTime();
			zone[2] = true;
			break;
		}
		else
			zone[2] = false;
	}
}

function gadget::draw() {
	foreach(var zone in therapy_zone) {
		zone[1][0].draw();
		zone[1][1].draw();
	}
		
	foreach(var zone in ammunition_zone){
		zone[1][0].draw();
		zone[1][1].draw();
	}
}