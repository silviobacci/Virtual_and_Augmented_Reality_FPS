#include "bullet.s3d"

#define PLAYER_SPEED 		0.01
#define PLAYER_ANGLE_STEP 	0.01

#define SWAT_START_WALK		16
#define SWAT_END_WALK		48	
#define SWAT_TOTAL_FRAMES	32	

class player{
	var mesh_player_lower;
	var mesh_player_upper;
	var obj_player_lower;
	var obj_player_upper;
	var obj_player;
	var position;
	var direction;
	var angleY;
	var current_frame;
	var id;
	var color;
	var mybullet;
	var fx_shoot;
	
	init(i, c, p);
	draw();
	update(matrix_level);
	get_position();
	shoot();
};

function player::init(i, c, p){
	id = i;
	color = c;
	position = p;
	angleY = 0;
	direction = [sin(angleY), 0, cos(angleY)];
	
	fx_shoot = CvmVRAWAV("shoot.wav", true);
	
	mesh_player_lower = CVmNewMesh("swat_lower.aam");
	mesh_player_upper = CVmNewMesh("swat_upper.aam");
	mesh_player_lower.ModulateMaterials(color);
	mesh_player_upper.ModulateMaterials(color);
	
	var sf = mesh_player_lower.normalize(1);
	mesh_player_upper.scale(sf);
	
	obj_player_lower = CVmObj(mesh_player_lower);
	obj_player_upper = CVmObj(mesh_player_upper);
	obj_player = CVmObj();
	obj_player.AddChild(obj_player_lower);
	obj_player.AddChild(obj_player_upper);

	obj_player.SetPosition(position);
	
	current_frame = 0;
	
	mybullet = bullet();	
	mybullet.init(c);
}

function player::get_position(){
	return obj_player.GetPosition();
}

function player::shoot(){
	mybullet.shoot(position, direction);
	fx_shoot.SetPosition(position);
	fx_shoot.SetListenerPosition(CameraGetPosition());
	fx_shoot.SetListenerOrientation(- CameraGetDirection());
	fx_shoot.play();
}

function player::update(matrix_level){
	var old_position = position;
	//var old_current_frame = current_frame;
	var run = 1;
	
	if (keypressed(VK_SHIFT))
		run = 2;
	
	if (keypressed(VK_LEFT))
		angleY += PLAYER_ANGLE_STEP;
		
	if (keypressed(VK_RIGHT))
		angleY -= PLAYER_ANGLE_STEP;
		
	direction = [sin(angleY), 0, cos(angleY)];
		
	if (keypressed(VK_UP)){
		position += PLAYER_SPEED * direction * run;
		current_frame = (current_frame + 0.25 * run) % SWAT_TOTAL_FRAMES;
	}
		
	if (keypressed(VK_DOWN)){
		position -= PLAYER_SPEED * direction * run;
		current_frame = (current_frame - 0.25 * run) % SWAT_TOTAL_FRAMES;
		if (current_frame <= 0)
			current_frame += SWAT_TOTAL_FRAMES;
	}
	
	if (keypressed(VK_SPACE))
		shoot();
	
	var bb1, bb2;
	bb1 = mesh_player_upper.GetBoundingBox();
	bb2 = mesh_player_lower.GetBoundingBox();
	
	var c = array(8);
	
	c[0] = position + [bb1[0], 	0, bb2[5]];
	c[1] = position + [0, 		0, bb2[5]];
	c[2] = position + [bb1[3], 	0, bb2[5]];
	c[3] = position + [bb1[3], 	0, 0];
	c[4] = position + [bb1[3], 	0, bb2[2]];
	c[5] = position + [0, 		0, bb2[2]];
	c[6] = position + [bb1[0], 	0, bb2[2]];
	c[7] = position + [bb1[0], 	0, 0];
	
	for (var i = 0; i < 8; i++){
		var ix = int(c[i].x);
		var iz = int(c[i].z);
		if(matrix_level[iz][ix] == 1){
			position = old_position;
			break;
		}
	}
		
	obj_player.SetPosition(position);
	obj_player.SetRotation(RAD_TO_GRAD * angleY, [0, 1, 0]);
	
	mybullet.update();
}

function player::draw(){
	obj_player.draw(VR_FRAMENUMBER, SWAT_START_WALK + current_frame);
	mybullet.draw();
}