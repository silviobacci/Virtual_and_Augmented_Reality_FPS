#define PLAYER_SPEED 		0.05
#define PLAYER_SPEED_STEP 	0.001
#define PLAYER_SPEED_SIDE 	0.01
#define PLAYER_ANGLE_STEP 	0.01
#define SPEED_RATIO			1

function player::update_moving_direction() {
	moving_direction = [CameraGetCurrent().GetDirection().x, 0, CameraGetCurrent().GetDirection().z];
}

function player::update_speed() {
	if(my_keyboard.is_pressed(VK_LMENU))
		run = 2;
	else
		run = 1;
	
	if(my_keyboard.is_pressed(VK_W)){
		temp_direction = FRONT;
		front_direction = moving_direction;
		if(front_speed < PLAYER_SPEED)
			front_speed += PLAYER_SPEED_STEP;
	}
	else if(my_keyboard.is_pressed(VK_S)){
		temp_direction = REAR;
		front_direction = moving_direction;
		if(front_speed > -PLAYER_SPEED/2)
			front_speed -= 2*PLAYER_SPEED_STEP;
	}
	else if(front_speed > 0)
		front_speed -= PLAYER_SPEED_STEP;
	else if(front_speed < 0)
		front_speed += PLAYER_SPEED_STEP;
	
	if(my_keyboard.is_pressed(VK_A)){
		temp_direction = L;	
		side_direction = [+ moving_direction[2], 0, - moving_direction[0]];
		if(side_speed < PLAYER_SPEED_SIDE)
			side_speed += PLAYER_SPEED_STEP;
		if(front_speed == 0)
			is_side_walking = true;
	}
	else if(my_keyboard.is_pressed(VK_D)) {
		temp_direction = R;	
		side_direction = [- moving_direction[2], 0, + moving_direction[0]];
		if(side_speed < PLAYER_SPEED_SIDE)
			side_speed += PLAYER_SPEED_STEP;
		if(front_speed == 0)
			is_side_walking = true;
	}
	else if(side_speed > 0)
		side_speed -= PLAYER_SPEED_STEP;
	else if(side_speed < 0)
		side_speed += PLAYER_SPEED_STEP;
		
	if(abs(front_speed) < 0.001)
		front_speed = 0;
		
	if(abs(side_speed) < 0.001) {
		is_side_walking = false;
		side_speed = 0;
	}
}

function player::update_position(){
	if(front_speed == 0 && side_speed == 0)
		return;
		
	position += [run * front_speed * front_direction[0], 0, run * front_speed * front_direction[2]];
	position += [run * side_speed * side_direction[0], 0, run * side_speed * side_direction[2]];
			
	if(is_side_walking)
		return;
		
	if(front_speed > 0)
		current_frame = (current_frame + SWAT_FRAME_STEP *(SPEED_RATIO + run * front_speed)) % SWAT_TOTAL_FRAMES;
	else if((current_frame = (current_frame - SWAT_FRAME_STEP *(SPEED_RATIO + run * front_speed)) % SWAT_TOTAL_FRAMES) <= 0)
		current_frame += SWAT_TOTAL_FRAMES;
		
	if(abs(current_frame - SWAT_ONE_STEP) < 0.5 || abs(current_frame - SWAT_TOTAL_FRAMES) < 0.5)
		my_sound_player.play_step(position);
}

function player::update() {
	var old_position = position;
	
	update_moving_direction();
	update_speed();

	if(my_keyboard.is_pressed(VK_SHIFT))
		shoot();
	else if(my_keyboard.is_pressed(VK_C)){
		if(current_weapon == my_railgun)
			change_weapon(my_rocketl);	
		else
			change_weapon(my_railgun);
	}
	else if(my_keyboard.is_pressed(VK_R))
		current_weapon.recharge();
		
	if(my_keyboard.is_pressed(VK_SPACE) && !is_jumping)
		init_jump_dynamic();
	
	if(!is_jumping && !is_falling)
		update_position();
		
	var posx = int(position.x);
	var posz = int(position.z);
	var jx = int(abs(position.x - posx) * N_STEPS);
	var jz = int(abs(position.z - posz) * N_STEPS);
	wall_height = my_world.matrix_level[posz * N_STEPS + jz][posx * N_STEPS + jx];
	
	if(is_jumping || is_falling)
		update_jump_dynamics();
		
	if(!is_falling && check_collision()){
		if(!is_falling) {
			position = old_position;
			front_speed = 0;
		}
	}
	else {
		if(wall_height - position.y > 0) {
			position.y = wall_height;
			my_sound_player.play_step(position);
		}
		else if(!is_jumping && wall_height - position.y < 0) {
			position.y = wall_height;
			my_sound_player.play_step(position);
		}
	}

	obj_player.setposition(position);
	
	current_weapon.update();
}

function player::update_enemy_info() {
	var old_position = position;
	
	if(!is_jumping && !is_falling)
		update_position();
		
	var posx = int(position.x);
	var posz = int(position.z);
	var jx = int(abs(position.x - posx) * N_STEPS);
	var jz = int(abs(position.z - posz) * N_STEPS);
	wall_height = my_world.matrix_level[posz * N_STEPS + jz][posx * N_STEPS + jx];
	
	if(is_jumping || is_falling)
		update_jump_dynamics();
		
	if(!is_falling && check_collision()){
		if(!is_falling) {
			position = old_position;
			front_speed = 0;
		}
	}
	else {
		if(wall_height - position.y > 0) {
			position.y = wall_height;
			my_sound_player.play_step(position);
		}
		else if(!is_jumping && wall_height - position.y < 0) {
			position.y = wall_height;
			my_sound_player.play_step(position);
		}
	}
	
	obj_player.setposition(position);
	obj_player.setrotation(angle_direction, 0, 1, 0);
}

function player::update_enemy_from_PDU() {
	var old_position = position;
	
	if(check_collision())
		position = old_position;
		
	obj_player.setposition(position);
	obj_player.setrotation(angle_direction, 0, 1, 0);
	
}