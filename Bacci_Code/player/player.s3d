#define PLAYER_SPEED 		0.07
#define PLAYER_SPEED_CLIMB 	0.03
#define PLAYER_SPEED_STEP 	0.001
#define PLAYER_ANGLE_STEP 	0.01
#define SWAT_START_WALK 	16
#define SWAT_END_WALK 		48
#define SWAT_TOTAL_FRAMES 	32
#define SWAT_FRAME_STEP 	0.35
#define CLIP_SIZE 			500
#define CLIMB_VALUE 		1.5

#define PLAYER_RADIUS		30
#define PLAYER_MASS			80
#define VISCOUS_PLAYER 		6* PI* n * PLAYER_RADIUS  / PLAYER_MASS
#define JUMP_FORCE 			15000
#define JUMP_ANGLE 			0

class player{
	//Player-related 
	var mesh_player_lower;
	var mesh_player_upper;
	
	var obj_player_lower;
	var obj_player_upper;
	var obj_player;
	
	var position;
	var angle_direction;
	var moving_direction;
	var current_frame; 
	var id;
	var speed;
	
	//jump related 
	var is_jumping;
	var dx;
	var dy;
	var accx;
	var accy;
	var speedx;
	var speedy; 
	var angle;
	var delta_t;
	
	//Player-associated
	var my_railgun; 
	var my_rocketl; 
	var current_weapon;
	
	init(i, p);
	create_player();
	
	get_position();
	
	change_weapon(new_weapon);
	shoot();
	reset_jump_dynamics();
	init_jump_dynamic();
	update_jump_dynamics();
	update_speed_position();
	check_collision(obj_array, map);
	update(obj_array, map, matrix_level);
	
	draw();
};

function player::create_player(){
	mesh_player_lower = CVmNewMesh("swat_lower.aam");
	var sf1 = mesh_player_lower.Normalize(1);
	
	mesh_player_upper = CVmNewMesh("swat_upper.aam"); 
	mesh_player_upper.scale(sf1);
	
	my_railgun.create_weapon(RAILGUN_MESH, sf1);
	my_rocketl.create_weapon(ROCKETL_MESH, sf1);
	
	obj_player_upper = CVmObj(mesh_player_upper);
	obj_player_lower = CVmObj(mesh_player_lower);
	obj_player = CVmObj();
	
	obj_player.AddChild(obj_player_lower);
	obj_player.AddChild(obj_player_upper);
	obj_player_upper.AddChild(current_weapon.obj_gun);
	obj_player_upper.setPivotPoint(0,0,0);
	obj_player.setposition(position);
}

function player::init(i, p){
	id = 				i;
	position = 			p;
	current_frame = 	0;
	speed = 			0.0;
	angle_direction = 	0.0;
	is_jumping = 		false;
	delta_t = 			1.0 / FRAME_RATE;
	moving_direction = 	[sin(angle_direction), 0 , cos(angle_direction)]; 
	my_railgun = 		weapon();
	my_rocketl = 		weapon();
	current_weapon =	my_rocketl;
	
	my_railgun.init(RAILGUN_NAME, RAILGUN_N_BULLETS, RAILGUN_SHOOT_FORCE, RAILGUN_BULLET_RADIUS, RAILGUN_BULLET_MASS);
	my_rocketl.init(ROCKETL_NAME, ROCKETL_N_BULLETS, ROCKETL_SHOOT_FORCE, ROCKETL_BULLET_RADIUS, ROCKETL_BULLET_MASS);
    
    create_player();
    change_weapon(my_rocketl);
}

function player::get_position(){
	return obj_player.GetPosition();
}

function player::reset_jump_dynamics(){
	dx = 			0.0;
	dy = 			0.0;
	speedx = 		0.0;
	speedy = 		0.0;
	accx =			0.0;
	accy = 			0.0;
	is_jumping = 	false;
}

function player::init_jump_dynamic(){
	reset_jump_dynamics();
	speedx = speed;

	if(speed > 0)
		angle = GRAD_TO_RAD * 45;
	else
		angle = GRAD_TO_RAD * 90;
		
	accx = JUMP_FORCE / PLAYER_MASS * cos(angle);
	accy = JUMP_FORCE / PLAYER_MASS * sin(angle) - g;
	is_jumping = true;
}

function player::update_jump_dynamics(){
	speedx += accx * delta_t; 
	speedy += accy * delta_t;
		
	dx = delta_t * speedx;
	dy = delta_t * speedy;
		
	angle = atan(dy/dx);
	
	position[0] += moving_direction[0] * dx;
	position[1] += dy;
	position[2] += moving_direction[2] * dx;
	
	if(position[1] <= 0){
		position[1] = 0;
		reset_jump_dynamics();
	}
	
	accx = - VISCOUS_PLAYER / PLAYER_MASS * sqrt(speedx^2 + speedy^2) * cos(angle);
	accy = - VISCOUS_PLAYER / PLAYER_MASS * sqrt(speedx^2 + speedy^2) * sin(angle) - g;
}

function player::change_weapon(new_weapon){
	if(current_weapon != null)
		obj_player_upper.RemoveChild(current_weapon.obj_gun);
	current_weapon = new_weapon;
	obj_player_upper.AddChild(current_weapon.obj_gun);
}

function player::shoot(){
	current_weapon.shoot(position, moving_direction);
}

function player::check_collision(obj_array, matrix_level){
	var obj_to_check = array(0);
	var posx = int(position.x);
	var posz = int(position.z);
	var jx = int(abs(position.x - posx) * N_STEPS);
	var jz = int(abs(position.z - posz) * N_STEPS);
	
	for(var i = posz - 1; i <= posz + 1; i++)
		for(var j = posx - 1; j <= posx + 1; j++)
			for(var k = 0; k < N_STEPS; k++)
				for(var v = 0; v < N_STEPS; v++) {
					var obj = obj_array[i * N_STEPS + k][j * N_STEPS + v];
	    			if(obj != void)
	        			aadd(obj_to_check, obj_array[i * N_STEPS + k][j * N_STEPS + k]);
	        	}
	          
	foreach (var obj in obj_to_check){
		var obj_pos = obj.GetPosition();
		
		var posx = int(obj_pos.x);
		var posz = int(obj_pos.z);
		var jx = int(abs(obj_pos.x - posx) * N_STEPS);
		var jz = int(abs(obj_pos.z - posz) * N_STEPS);
		var height = matrix_level[posz * N_STEPS + jz][posx * N_STEPS + jx];
		
		var x = obj_pos.x + 0.5 - position.x;
		var z = obj_pos.z + 0.5 - position.z;
		var distance = sqrt(x^2 + z^2);
		
		if(distance < 0.9 && abs(height - position.y) > 0.25) 
			return true;
	}
	return false;
}

function player::update_speed_position(){
	if(my_keyboard.is_pressed(VK_W)){
		if(speed < PLAYER_SPEED)
			speed += PLAYER_SPEED_STEP;
	}
	else if(my_keyboard.is_pressed(VK_S)){
		if(speed > -PLAYER_SPEED/2)
			speed -= 2*PLAYER_SPEED_STEP;
	}
	else if(speed > 0)
		speed -= PLAYER_SPEED_STEP;
	else if(speed < 0)
		speed += PLAYER_SPEED_STEP;
		
	if(abs(speed) < 0.001) {
		speed = 0;
		return;
	}
		
	if(speed > 0)
		current_frame = (current_frame + SWAT_FRAME_STEP *(0.95 + speed))% SWAT_TOTAL_FRAMES;
	else if((current_frame = (current_frame - SWAT_FRAME_STEP *(0.95 + speed))% SWAT_TOTAL_FRAMES) <= 0)
		current_frame += SWAT_TOTAL_FRAMES;

	position += [speed * moving_direction[0], 0, speed * moving_direction[2]];
}

function player::update(obj_array, map, matrix_level) {
	var old_position = position;

	if(my_keyboard.is_pressed(VK_SHIFT))
		shoot();
	else if(my_keyboard.is_pressed(VK_A)){					
		var dir_ortho = [moving_direction[2], 0, -moving_direction[0]];
		position += PLAYER_SPEED * dir_ortho;	
	}
	else if(my_keyboard.is_pressed(VK_D)){
		var dir_ortho = [-moving_direction[2], 0, moving_direction[0]];
		position += PLAYER_SPEED * dir_ortho;	
	}
	else if(my_keyboard.is_pressed(VK_C)){
		if(current_weapon == my_railgun)
			change_weapon(my_rocketl);	
		else
			change_weapon(my_railgun);
	}
	else if(my_keyboard.is_pressed(VK_R))
		current_weapon.add_bullets(20);
	
	if(my_keyboard.is_pressed(VK_SPACE) && !is_jumping)
		init_jump_dynamic();
	
	if(is_jumping)
		update_jump_dynamics();
	else
		update_speed_position();
		
	if(check_collision(obj_array, matrix_level)){
		position = old_position;
		speed = 0;
	}
	else {
		var posx = int(position.x);
		var posz = int(position.z);
		var jx = int(abs(position.x - posx) * N_STEPS);
		var jz = int(abs(position.z - posz) * N_STEPS);
		var height = matrix_level[posz * N_STEPS + jz][posx * N_STEPS + jx];
		var tmp = height - position.y;
		if(height - position.y > 0) {
			speed = PLAYER_SPEED_CLIMB;
			var tmp = "is climbing";
			trace(tmp);
			position.y = height;
		}
		else if(height - position.y < 0){
			position.y = height;
			var tmp = "is falling";
			trace(tmp);
		} 
	}

	obj_player.setposition(position);
	
	current_weapon.update();
}

function player::draw(){											
	obj_player.draw(VR_FRAMENUMBER, SWAT_START_WALK + current_frame);
	current_weapon.draw();
}