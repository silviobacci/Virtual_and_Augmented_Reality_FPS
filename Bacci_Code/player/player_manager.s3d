var my_players;

class player_manager {
	var map;
	var matrix_level;
	var array_player; 
	var obj;
	
	init(mp, ml);
	draw();
	random_pos();
	set_orientation(pos);
	addplayer();
	update();
	
	get_player_position();
};

function player_manager::init(mp, ml){
	map = mp;
	matrix_level = ml;
	array_player = array(0);
}

function player_manager::update(){
	foreach(var i in array_player)
		i.update(matrix_level);
}

function player_manager::random_pos() {
	var z;
	var x;
	var rows = len(map) - 1;
	var columns = len(map[0]) - 1;
	do {
		z = rand(rows);
		x = rand(columns);
	}while(map[z][x] > 0);
	
	return [x, 0, z];
}

function player_manager::set_orientation(pos) {
	var or;
	var center = [len(map) / 2, 0, len(map[0]) / 2];
	var mesh = CVmNewMesh(VRP_BOX);
	mesh.scale(1);
	obj = CVmObj(mesh);
	obj.setposition(center);
	var x = center.x - pos.x;
	var z = center.z - pos.z;
	trace(x);
	trace(z);
	var at = atan(x / z) * RAD_TO_GRAD;
	trace(at);
	if(x > 0 && z > 0)
		or = at;
	else if(x > 0 && z < 0)
		or = 180 + at;
	else if(x < 0 && z > 0)
		or = at;
	else if(x < 0 && z < 0)
		or = 180 + at;
	trace(or);
	
	return or;
}

function player_manager::addplayer(){
		var p = player();
		var pos = [43, 0, 23];//random_pos();
		var orientation = set_orientation(pos);
		p.init(len(array_player) + 1, pos, orientation);
		aadd(array_player, p);
}

function player_manager::get_player_position() {
	var n_players = len(array_player);
	var positions = array(n_players);
	var i = 0;
	foreach (var pl in array_player) {
		positions[i] = pl.get_position();
		i++;
	}
	
	return positions;
}

function player_manager::draw(){
	foreach (var player in array_player)
		player.draw();
	obj.draw();
}
