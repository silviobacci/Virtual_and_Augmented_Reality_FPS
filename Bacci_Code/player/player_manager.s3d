#define RESPAWN_PERIOD		2000

var my_players;

var timer_players = array(0);
function init_camera();

class player_manager {
	var map;
	var my_index;
	var matrix_level;
	var array_player; 
	var timer_respawn;
	var respawning;
	
	init(mp, ml);
	draw();
	create_players(players);
	set_my_index();
	random_pos();
	set_orientation(pos);
	addplayer(id, pos);
	remove_player(id);
	respawn_player(id);
	update();
	update_player_from_pdu(pdu);
	out_of_map();
	
	get_player_position();
	get_me();
};

function player_manager::init(mp, ml){
	map = mp;
	matrix_level = ml;
	array_player = array(0);
	respawning = false;
}

function player_manager::update(){
	if(respawning && getTime() - timer_respawn > RESPAWN_PERIOD) {
		respawning = false;
		respawn_player(get_me().id);
		my_death_menu.show_menu = false;
	}
	
	get_me().update(matrix_level);
	foreach(var player in array_player)
		if(player.id != my_players.my_index)
			player.update_enemy_info();
}

function player_manager::update_player_from_pdu(pdu){
	foreach(var player in array_player)
		if(player.id == pdu[1]) {
			player.hidden = 			false;
			player.position = 			pdu[2]; 
			player.angle_direction = 	pdu[3]; 
			player.moving_direction = 	pdu[4];
			player.current_frame = 		pdu[5];  
			player.front_speed = 		pdu[6]; 
			player.side_speed = 		pdu[7]; 
			player.front_direction = 	pdu[8]; 
			player.side_direction = 	pdu[9]; 
			player.is_falling = 		pdu[10]; 
			player.is_jumping = 		pdu[11]; 
			player.speedx = 			pdu[12]; 
			player.speedy = 			pdu[13]; 
			player.accx = 				pdu[14]; 
			player.accy = 				pdu[15]; 
			player.update_enemy_from_PDU();
		}
}

function player_manager::random_pos() {
	var z;
	var x;
	var rows = len(map) - 1;
	var columns = len(map[0]) - 1;
	do {
		z = rand(rows);
		x = rand(columns);
	}while(map[z][x] > 0);
	
	return [x, 0, z];
}

function player_manager::set_orientation(pos) {
	var center = [len(map) / 2, 0, len(map[0]) / 2];
	var x = center.x - pos.x;
	var z = center.z - pos.z;
	var or = atan(x / z) * RAD_TO_GRAD;
	
	if(z < 0)
		or += 180;
	
	return or;
}

function player_manager::addplayer(id, pos){
	var p = player();
	var orientation = set_orientation(pos);
	p.init(id, pos, orientation);
	aadd(array_player, p);
}

function player_manager::remove_player(id){
	foreach(var player in array_player)
		if(player.id == id)
			player.hidden = true;
}

function player_manager::respawn_player(id) {
	var pos = my_players.random_pos();
	var o = my_players.set_orientation(pos);
	get_me().init(id, pos, o);
}

function player_manager::out_of_map() {
	my_death_menu.show_menu = true;
	get_me().position = [0, -5, 0];
	respawning = true;
	timer_respawn = getTime();
}

function player_manager::set_my_index(){
	var index = 0;
	foreach(var player in array_player) {
		if(player.id == my_network.my_id) {
			my_index = index;
			break;
		}
		index++;	
	}
}

function player_manager::create_players(players){
	foreach(var player in players) {
		addplayer(player[1], player[3]);
		my_score_info.add_score(player[1], 0);
		if(player[0] != NetGetIP())
			aadd(timer_players, [player[1], getTime()]);
	}
	set_my_index();
	init_camera();
}

function player_manager::get_player_position() {
	var n_players = len(array_player);
	var positions = array(n_players);
	var i = 0;
	foreach (var pl in array_player) {
		positions[i] = pl.get_position();
		i++;
	}
	
	return positions;
}

function player_manager::get_me() {
	return array_player[my_index];
}

function player_manager::draw(){
	foreach (var player in array_player)
		player.draw();
}
