var total_shooted_bullets = 0;

class weapon {
	var name;
	var bullet_type;
	var mesh_gun;
	var obj_gun;
	
	var shoot_force;
	var bullet_radius;
	var bullet_mass;
	
	var bullets;
	var shooted_bullets;
	var fx_shoot;
	
	var max_bullets;
	var n_bullets;
	var bullets_left;
	
	var ammunitions;
	
	create_weapon(mesh, scaling_factor);
	init(nm, nb, am, sf, br, bm);
	recharge();
	add_bullets(to_add);
	shoot(player_position, player_direction, shooting_direction);
	
	update();
	draw();
};

function weapon::create_weapon(mesh, scaling_factor) {
	mesh_gun = CVmNewMesh(mesh);
	mesh_gun.scale(scaling_factor);
	obj_gun = CVmObj(mesh_gun);
}

function weapon::init(nm, nb, am, sf, br, bm){
	name = nm;
	if(name == RAILGUN_NAME)
		bullet_type = RAILGUN_BULLET;
	else
		bullet_type = ROCKETL_BULLET;
	ammunitions = am;
	bullets_left = 0;
	max_bullets = nb - am;
	n_bullets = 0;
	shoot_force = sf;
	bullet_radius = br;
	bullet_mass = bm;
	shooted_bullets = array(0);
	bullets = array(0);
	add_bullets(nb);
}

function weapon::add_bullets(to_add){
	n_bullets += to_add;
	if(n_bullets > max_bullets) {
		bullets_left += n_bullets - max_bullets;
		if(bullets_left > ammunitions) {
			to_add -= bullets_left - ammunitions;
			bullets_left = ammunitions;
		}
		n_bullets = max_bullets;
	}

	recharge();
	
	var len_bullets = len(bullets);
	for(var i = total_shooted_bullets + len_bullets; i < total_shooted_bullets + len_bullets + to_add; i++){
		var b = bullet();
		b.init(i, bullet_type);
		aadd(bullets, b);
	}
}

function weapon::recharge(){
	var to_add = ammunitions - bullets_left;
	if(n_bullets < to_add)
		to_add = n_bullets;
		
	n_bullets -= to_add;
	bullets_left += to_add;
}

function weapon::shoot(player_position, player_direction, shooting_direction){
	if(bullets_left == 0)
		return;
		
	total_shooted_bullets++;
	var id = bullets[0].id;
	aadd(shooted_bullets, bullets[0]);
	bullets[0].shoot(player_position, player_direction, shooting_direction, shoot_force);
	bullets_left--;
	adel(bullets, 0);
	
	my_sound_player.play_shoot(player_position);
}

function weapon::update() {
	var index = 0;
	foreach (var bullet in shooted_bullets) {
		if(!bullet.is_flying)
			adel(shooted_bullets, index);
		else
			bullet.update();
		index++;
	}
}

function weapon::draw() {
	foreach (var bullet in shooted_bullets)
		bullet.draw();
}