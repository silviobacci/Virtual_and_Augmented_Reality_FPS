class weapon {
	var name;
	var mesh_gun;
	var obj_gun;
	
	var shoot_force;
	var bullet_radius;
	var bullet_mass;
	
	var bullets;
	var shooted_bullets;
	var fx_shoot;
	
	var n_bullets;
	var bullets_left;
	
	create_weapon(mesh, scaling_factor);
	init(nm, nb, sf, br, bm);
	add_bullets(to_add);
	shoot(position, shooting_direction);
	
	update(matrix_level);
	draw();
};

function weapon::create_weapon(mesh, scaling_factor) {
	mesh_gun = CVmNewMesh(mesh);
	mesh_gun.scale(scaling_factor);
	obj_gun = CVmObj(mesh_gun);
}

function weapon::init(nm, nb, sf, br, bm){
	name = nm;
	bullets_left = 0;
	n_bullets = 0;
	shoot_force = sf;
	bullet_radius = br;
	bullet_mass = bm;
	shooted_bullets = array(0);
	add_bullets(nb);
}

function weapon::add_bullets(to_add){
	bullets = array(n_bullets + to_add);
	bullets_left += to_add; 
	n_bullets = len(bullets);
	for(var i = 0; i < len(bullets); i++){
		var b = bullet();
		b.init(BULLET_RADIUS, BULLET_MASS);
		bullets[i] = b;
	}
}

function weapon::shoot(position, shooting_direction){
	if(len(bullets) <= 0)
		return;
		
	aadd(shooted_bullets, bullets[0]);
	bullets[0].shoot(position, shooting_direction, shoot_force);
	bullets_left--;
	adel(bullets, 0);
	
	my_sound_player.play_shoot(position);
}

function weapon::update(matrix_level) {
	foreach (var bullet in shooted_bullets)
		bullet.update(matrix_level);
}

function weapon::draw() {
	foreach (var bullet in shooted_bullets)
		bullet.draw();
}