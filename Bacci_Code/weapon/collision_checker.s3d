#define PLAYER_DIM		0.5
#define PLAYER_HEIGHT	1.6
#define PLAYER_HEAD		1.3
#define PLAYER_BODY		0.7

function bullet::check_if_hit(player) {
	if(position.y < player.y || position.y > player.y + PLAYER_HEIGHT)
		return NOSHOT;
		
	var distance = sqrt((player.x - position.x)^2 + (player.z - position.z)^2);
	
	if(distance > PLAYER_DIM)
		return NOSHOT;
		
	var colpito = getTime();
	trace(colpito);
	
	if(position.y > player.y + PLAYER_HEAD)
		return HEADSHOT;
	else if(position.y > player.y + PLAYER_BODY)
		return FOOTSHOT;
	else
		return BODYSHOT;
}

function bullet::check_wall_collision(){
	var y = 0;
	var iz = int(position.z);
	var jz = int(abs(position.z - iz) * N_STEPS);
	var ix = int(position.x);
	var jx = int(abs(position.x - ix) * N_STEPS);
	var z = iz * N_STEPS + jz;
	var x = ix * N_STEPS + jx;
	
	if(z >= 0 && z < len(my_world.matrix_level) && x >= 0 && x < len(my_world.matrix_level))
		y = my_world.matrix_level[z][x];
	if(y == void) {
		trace(z);
		trace(x);
	}
	if(y > position.y){
		//var wall = "wall hit";
		//trace(wall); 
		return true;	
	}
	
	return false;
}

function bullet::check_player_collision(){
	return check_if_hit(my_players.get_me().position);
}

function bullet::check_enemy_collision(){
	foreach(var player in my_players.array_player)
		if(player.id != my_players.get_me().id && check_if_hit(player.position) != NOSHOT) 
			return true;
	return false;
}