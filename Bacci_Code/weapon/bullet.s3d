#define RAILGUN_BULLET			0
#define ROCKETL_BULLET			1

#define RAILGUN_N_BULLETS 		100
#define RAILGUN_AMMUNITIONS		25
#define RAILGUN_NAME			"railgun"
#define RAILGUN_MESH			"railgun.aam"
#define RAILGUN_BULLET_MASS		0.008
#define RAILGUN_BULLET_RADIUS 	0.003
#define RAILGUN_SHOOT_FORCE 	100

#define ROCKETL_N_BULLETS 		100
#define ROCKETL_AMMUNITIONS		25
#define ROCKETL_NAME			"rocketl"
#define ROCKETL_MESH			"rocketl.aam"
#define ROCKETL_BULLET_MASS		0.008
#define ROCKETL_BULLET_RADIUS 	0.003
#define ROCKETL_SHOOT_FORCE 	100

#define GUN_POSITION_X			0.2
#define GUN_POSITION_Y			1
#define GUN_POSITION_Z			0

#define g 						9.81
#define n				 		0.0000186

#define N_BULLET_PDU	 		100
#define N_HIT_PDU		 		100

#define NOSHOT			-1
#define BODYSHOT		0
#define HEADSHOT		1

class bullet{
	var id;
	var mesh_bullet;
	var obj_bullet;
	
	var angle_x;
	var angle_y;
	var angle_x_offset;
	var angle_y_offset;
	var position;
	var old_position;
	var dir;

	var is_flying;
	var elapsed_time;
	var delta_t;
	
	var mass;
	var radius;
	var viscous;
	
	var dx;
	var dy;
	var speedx;
	var speedy; 
	var accx;
	var accy;
	
	var obj;
	var mesh;
	
	var fire_life;

	create_bullet();
	init(br, bm, i);
	update_bullet_from_pdu(PDU);
	
	check_if_hit(player);
	check_wall_collision();
	check_player_collision();
	check_enemy_collision();
	update_dynamics();
	update();
	update_enemy_bullet_info();
	
	draw();
	
	shoot(p, a, d, sf);
};

function bullet::create_bullet() {
	mesh_bullet = CVmnewMesh(VRP_SPHERE);
	mesh_bullet.scale(0.1);
	mesh_bullet.ModulateMaterials([0, 0, 0]);
	obj_bullet = CVmObj(mesh_bullet);
}

function bullet::init(br, bm, i){
	obj = array(0);
	mesh = CVmNewMesh(VRP_BOX);
	mesh.scale(2);
	
	radius = br;
	mass = bm;
	viscous = 6* PI* n * radius / mass;
	
	delta_t = TIME_STEP_UPDATE;
	
	id = i;
	is_flying = false;
	elapsed_time = 0.0;
	fire_life = N_BULLET_PDU;
	
	create_bullet();
}

function bullet::update_bullet_from_pdu(PDU) {
	if(PDU[3] == RAILGUN_BULLET)
		init(RAILGUN_BULLET_RADIUS, RAILGUN_BULLET_MASS, PDU[2]);
	else
		init(ROCKETL_BULLET_RADIUS, ROCKETL_BULLET_MASS, PDU[2]);
	
	position = PDU[4];
	speedx = PDU[5];
	speedy = PDU[6];
	accx = PDU[7];
	accy = PDU[8];
	angle_x = PDU[9];
	angle_y = PDU[10];
	is_flying = PDU[11];
}

function bullet::update_dynamics(){
	speedx += accx * delta_t;
	speedy += accy * delta_t;
	var speed = sqrt(speedx^2 + speedy^2);

	dx = delta_t * speedx;
	dy = delta_t * speedy;
	
	angle_y = atan(dy/dx);
	
	position.x += dx * cos(angle_x + angle_x_offset);
	position.y += dy;
	position.z += dx * sin(angle_x + angle_x_offset);
	
	accx = - viscous * speed * cos(angle_y) / mass;
	accy = - viscous * speed * sin(angle_y) / mass - g;
}

function bullet::update(){
	if(is_flying){
		old_position = position;
		update_dynamics();
		
		if(check_wall_collision()|| check_enemy_collision() || position[1] <= 0)
			is_flying = false;
		else
			obj_bullet.setposition(position);
	}
}

function bullet::update_enemy_bullet_info() {
	var is_hit = NOSHOT;
	if(is_flying){
		old_position = position;
		update_dynamics();
		
		is_hit = check_player_collision();
		if(check_wall_collision() || is_hit != NOSHOT || position[1] <= 0)
			is_flying = false;
		else
			obj_bullet.setposition(position);
	}
	return is_hit;
}

function bullet::shoot(p, a, d, sf){
	var gun_position = [-GUN_POSITION_X, GUN_POSITION_Y, GUN_POSITION_Z];
	gun_position = VectorRotate(a, 0, 1, 0, gun_position);
	dx = 0.0;
	dy = 0.0;
	speedx = 0.0;
	speedy = 0.0;
	angle_y_offset = 0;
	angle_y = asin(d.y);
	//angle_y_offset = atan(cos(angle_y) / (sin(angle_y) + 1 / (CameraGetCurrent().GetPosition().y - GUN_POSITION_Y)));
	angle_y += angle_y_offset;
	//angle_x_offset = -(PI/2 - atan2pi(cos(angle_y), GUN_POSITION_X));
	var tmp_angle_x_offset = angle_x_offset * RAD_TO_GRAD;
	trace(tmp_angle_x_offset);
	angle_x = atan2pi(d.z, d.x) + angle_x_offset;
	var tmp_angle_x = angle_x * RAD_TO_GRAD;
	trace(tmp_angle_x);
	accx = sf * cos(angle_y) / mass;
	accy = sf * sin(angle_y) / mass - g;
	
	position = p + gun_position;
	//position = CameraGetCurrent().GetPosition();
	dir = d;
	is_flying = true;
}

function bullet::draw(){
	if(is_flying == true)
		obj_bullet.draw();
	foreach(var o in obj)
		o.draw();
}