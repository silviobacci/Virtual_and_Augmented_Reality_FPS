function CheckNewUser() {
	var socket_id = my_network.accept();
	if(socket_id != -1)
		my_network.add_player_manager(socket_id);
}

function ReceiveUsersList() {
	while((my_network.player_array = my_network.receive_from_manager()) == void);
	my_network.set_my_id();
	my_players.create_players(my_network.player_array);
	my_waiting_menu.show_menu = false;
	my_waiting_menu.first_time = true;
	my_mouse.set_invisible();
	my_network.status = IN_GAME;
	my_network.close();
	to_update = true;
}

function OnReceive() {
	var received_data;
	var already_present;
	var index;
	
	while(true){
		received_data = my_network.receive_in_game();

		if(received_data == void)
			break;

		if(received_data[1] != my_network.my_id)
			switch(received_data[0]) {
				case KEEPALIVE_PDU:
					for(var i = 0; i < len(timer_players); i++)
						if(timer_players[i][0] == received_data[1])
							timer_players[i][1] = getTime();	
					break;
				case POSITION_PDU:
					my_players.update_player_from_pdu(received_data);
					break;
				case BULLET_PDU:
					already_present = false;
					foreach(var bullet in enemy_bullets)
						if(bullet[1] == received_data[1] && bullet[0].id == received_data[2] && bullet[0].weapon_type == received_data[3])
							already_present = true;
					foreach(var bullet in bullet_player_hit)
						if(bullet[0] == received_data[1] && bullet[1] == received_data[2] && bullet[4] == received_data[3])
							already_present = true;
					foreach(var bullet in hit_pdu_received)
						if(bullet[0] == received_data[1] && bullet[1] == received_data[2] && bullet[2] == received_data[3])
							already_present = true;
					if(!already_present) {
						var b = bullet();
						b.update_bullet_from_pdu(received_data);
						var to_add = array(0);
						aadd(to_add, b);
						aadd(to_add, received_data[1]);
						aadd(enemy_bullets, to_add);
						if(b.weapon_type == RAILGUN_BULLET)
							my_sound_player.play_railgun(my_players.get_player_by_id(received_data[1]).position);
						else
							my_sound_player.play_rocketl(my_players.get_player_by_id(received_data[1]).position);
					}
					break;
				case HIT_PDU:
					already_present = false;
					foreach(var pdu in hit_pdu_received)
						if(pdu[0] == received_data[2] && pdu[1] == received_data[3]) {
							index = 0;
							foreach(var bullet in enemy_bullets) {
								if(bullet[1] == pdu[0] && bullet[0].id == pdu[1])
									adel(enemy_bullets, index);
								index++;
							}
							already_present = true;
						}
					if(!already_present) {
						trace(received_data);
						aadd(hit_pdu_received, [received_data[2], received_data[3], received_data[5]]);
						my_score_info.update(received_data[2], received_data[4], my_players.get_me().id);
					}
					break;
				case SCORE_PDU:
					my_score_info.update_from_pdu(received_data, my_players.get_me().id);
					break;
			}
	}
}

function ClearBufferGame() {
	while(my_network.receive_in_game() != void);
}

function ClearBufferManager() {
	while(my_network.receive_init() != void);
}