#define	MANAGER				0
#define	CONNECTING			1
#define	IN_GAME				2

#define	MAX_PLAYERS			4

#define SOURCE_IP_ADDRESS	"0.0.0.0"
#define DEST_IP_ADDRESS		"192.168.1.255"	
#define PORT				50023	
#define PORT_INIT			50022	

#define POSITION_PDU 	1
#define BULLET_PDU		2
#define	KEEPALIVE_PDU	3
#define	EXPLOSION_PDU	4
#define	SCORE_PDU		5
#define	RESET_PDU		6

var my_network;

class network{
	var id;
	var status;
	var channel;
	var channel_init;
	var player_array;
	
	init();
	check_if_manager();
	add_player(IP);
	create_INIT_PDU(IP, ID);
	create_IP_PDU();
	create_RESET_PDU();
	create_KEEPALIVE_PDU();
	create_POSITION_PDU(position, direction, velocity);
	create_SCORE_PDU(scores);
	create_BULLET_PDU(type, position, direction, fire_life);
	create_EXPLOSION_PDU(enemy);
	send(PDU);
	receive();
	send_init(PDU);
	receive_init();
};

function network::init() {
	player_array = array(0);
	status = CONNECTING;
	channel = NetCreateChannel(PORT, SOURCE_IP_ADDRESS, VR_NO_BLOCKING);
	channel_init = NetCreateChannel(PORT_INIT, SOURCE_IP_ADDRESS, VR_NO_BLOCKING);
	check_if_manager();
}

function network::check_if_manager() {
	var received_data;
	
	while(true){
		received_data = receive_init();

		if(received_data == void)
			break;

		if(received_data != NetGetIP())
			status = MANAGER;
	}
}

function network::add_player(IP) {
	foreach(var player in player_array)
		if(player == IP)
			return;
	var player = array(2);
	player[0] = IP;
	player[1] = len(player_array);
	aadd(array_player, player);
}

function network::create_INIT_PDU(IP, ID) {
	var PDU = vector(2);
	PDU[0] = IP;
	PDU[1] = ID;
	return PDU;
}

function network::create_IP_PDU(IP, ID) {
	return NetGetIP();
}

function network::create_RESET_PDU() {
	var PDU = vector(2);
	PDU[0] = RESET_PDU;
	PDU[1] = id;
	return PDU;
}

function network::create_KEEPALIVE_PDU() {
	var PDU = vector(2);
	PDU[0] = KEEPALIVE_PDU;
	PDU[1] = id;
	return PDU;
}

function network::create_POSITION_PDU(position, direction, velocity) {
	var PDU = vector(7);
	PDU[0] = POSITION_PDU;
	PDU[1] = id;
	PDU[2] = position[0];
	PDU[3] = position[1];
	PDU[4] = position[2];
	PDU[5] = direction;	
	PDU[6] = velocity;
	return PDU;
}

function network::create_SCORE_PDU(scores) {
	var n_players = len(scores);
	var PDU = vector(n_players);
	PDU[0] = SCORE_PDU;
	PDU[1] = id;
	for(var i = 0; i < n_players; i++)
		PDU[2 + i] = scores[i];
	return PDU;
}

function network::create_BULLET_PDU(type, position, direction, fire_life) {
	var PDU = vector(7);
	PDU[0] = BULLET_PDU;
	PDU[1] = id;
	PDU[2] = type;
	PDU[3] = position[0];
	PDU[4] = position[1];
	PDU[5] = position[2];
	PDU[6] = fire_life;
	PDU[7] = direction;	
	return PDU;
}

function network::create_EXPLOSION_PDU(enemy) {
	var PDU = vector(3);
	PDU[0] = RESET_PDU;
	PDU[1] = id;
	PDU[2] = enemy;
	return PDU;
}

function network::send(PAYLOAD){
	NetVarSendTo(DEST_IP_ADDRESS, PORT, PAYLOAD);
}

function network::send_init(PAYLOAD){
	NetVarSendTo(DEST_IP_ADDRESS, PORT_INIT, PAYLOAD);
}

function network::receive() {
	var address = 0;
	return NetVarReceiveFrom(channel, &address);
}

function network::receive_init() {
	var address = 0;
	return NetVarReceiveFrom(channel_init, &address);
}