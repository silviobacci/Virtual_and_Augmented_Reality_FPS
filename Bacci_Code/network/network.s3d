#define	MAX_PLAYERS			1

#define SOURCE_IP_ADDRESS	"0.0.0.0"
#define BROADCAST_ADDRESS	"192.168.1.255"
#define PORT_UDP_GAME		50023	
#define PORT_UDP_INIT		50022	
#define PORT_TCP_INIT		50021

#define INIT_PDU_PERIOD			500
#define POSITION_PDU_PERIOD		50
#define KEEPALIVE_PDU_PERIOD	500
#define HIT_PDU_PERIOD			10
#define BULLET_PDU_PERIOD		20
#define SCORE_PDU_PERIOD		1000

#define POSITION_PDU 	1
#define BULLET_PDU		2
#define	KEEPALIVE_PDU	3
#define	HIT_PDU			4
#define	SCORE_PDU		5

class network{
	var manager_ip;
	var my_id;
	var status;
	var channel_init;
	var channel_game;
	var channel_tcp;
	var socket_tcp;
	var player_array;
	
	init();
	check_if_manager();
	set_my_id();
	add_player_manager(IP);
	create_MANAGER_PDU(IP, ID);
	create_USER_PDU();
	create_SCORE_PDU(scores);
	create_KEEPALIVE_PDU();
	create_POSITION_PDU(player);
	create_HIT_PDU(enemy_id, bullet_id, type);
	create_BULLET_PDU(bullet, type);
	accept();
	connect();
	close_manager();
	close_user();
	close();
	send_in_game(PDU);
	send_init(PAYLOAD);
	send_by_user(PDU);
	send_by_manager(PDU);
	receive_in_game();
	receive_init();
	receive_from_manager();
	receive_from_user(socket);
};

function network::init() {
	player_array = array(0);
	status = NOT_CONNECTED;
	channel_tcp = NetCreateChannelTCP(PORT_TCP_INIT, SOURCE_IP_ADDRESS);
	channel_init = NetCreateChannel(PORT_UDP_INIT, SOURCE_IP_ADDRESS, VR_NO_BLOCKING);
	channel_game = NetCreateChannel(PORT_UDP_GAME, SOURCE_IP_ADDRESS, VR_NO_BLOCKING);
}

function network::check_if_manager() {
	var timer = getTime();
	
	while(getTime() - timer < INIT_PDU_PERIOD && manager_ip == void)
		manager_ip = receive_init();

	if(manager_ip == void) {
		status = MANAGING;
		add_player_manager(-1);
		set_my_id();
		manager_ip = NetGetIP();
	}
	
	var tmp = "IP MANAGER: " + manager_ip;
	trace(tmp);
}

function network::set_my_id() {
	var index = 0;
	foreach(var player in player_array) {
		if(player[0] == NetGetIP()) {
			my_id = player[1];
			my_players.my_index = index;
			break;
		}
		index++;
	}
}

function network::add_player_manager(socket) {
	var to_add = array(4);
	to_add[1] = len(player_array);
	to_add[2] = socket;
	to_add[3] = my_players.random_pos();
	if(to_add[2] == -1)
		to_add[0] = NetGetIP();
	else
		to_add[0] = receive_from_user(to_add[2]);
	    
	aadd(player_array, to_add);
	
	if(len(player_array) == MAX_PLAYERS)
		status = READY_MNG;
}

function network::create_MANAGER_PDU(IP, ID) {
	var PDU = array(3);
	PDU[0] = IP;
	PDU[1] = ID;
	PDU[2] = status;
	return PDU;
}

function network::create_USER_PDU() {
	return NetGetIP();
}

function network::create_SCORE_PDU(scores) {
	var PDU = array(2 + len(scores));
	PDU[0] = SCORE_PDU;
	PDU[1] = my_id;
	var index = 2;
	foreach(var score in scores)
		PDU[index++] = score;
	return PDU;
}

function network::create_KEEPALIVE_PDU() {
	var PDU = array(2);
	PDU[0] = KEEPALIVE_PDU;
	PDU[1] = my_id;
	return PDU;
}

function network::create_POSITION_PDU(player) {
	var PDU = array(16);
	PDU[0] = POSITION_PDU;
	PDU[1] = my_id;
	PDU[2] = player.position;
	PDU[3] = player.angle_direction;  
	PDU[4] = player.moving_direction; 
	PDU[5] = player.current_frame; 
	PDU[6] = player.front_speed; 
	PDU[7] = player.side_speed; 
	PDU[8] = player.front_direction; 
	PDU[9] = player.side_direction; 
	PDU[10] = player.is_falling; 
	PDU[11] = player.is_jumping; 
	PDU[12] = player.speedx; 
	PDU[13] = player.speedy; 
	PDU[14] = player.accx; 
	PDU[15] = player.accy; 
	return PDU;
}

function network::create_BULLET_PDU(bullet, type) {
	var PDU = array(12);
	PDU[0] = BULLET_PDU;
	PDU[1] = my_id;
	PDU[2] = bullet.id;
	PDU[3] = type;
	PDU[4] = bullet.position;
	PDU[5] = bullet.speedx;  
	PDU[6] = bullet.speedy;  
	PDU[7] = bullet.accx;  
	PDU[8] = bullet.accy;  
	PDU[9] = bullet.angle_x;  
	PDU[10] = bullet.angle_y; 
	PDU[11] = bullet.is_flying;  
	return PDU;
}

function network::create_HIT_PDU(enemy_id, bullet_id, type) {
	var PDU = array(5);
	PDU[0] = HIT_PDU;
	PDU[1] = my_id;
	PDU[2] = enemy_id;
	PDU[3] = bullet_id;
	PDU[4] = type;
	return PDU;
}

function network::accept(){
	return NetAcceptTCP(channel_tcp);
}

function network::connect(){
	socket_tcp = NetConnectTCP(manager_ip, PORT_TCP_INIT);
	return socket_tcp;
}

function network::close_manager() {
	foreach(var player in player_array)
		if(player[0] != NetGetIP())
			NetClose(player[2]);
}

function network::close_user() {
	NetClose(socket_tcp);
}

function network::close() {
	if(status == MANAGING || status == READY_MNG)
		close_manager();
	else
		close_user();
}

function network::send_in_game(PAYLOAD){
	foreach(var player in player_array)
		if(player[0] != NetGetIP())
			NetVarSendTo(player[0], PORT_UDP_GAME, PAYLOAD);
}

function network::send_init(PAYLOAD){
	NetVarSendTo(BROADCAST_ADDRESS, PORT_UDP_INIT, PAYLOAD);
}

function network::send_by_user(PAYLOAD){
	NetVarSendToTCP(socket_tcp, PAYLOAD);
}

function network::send_by_manager(PAYLOAD){
	foreach(var player in player_array)
		if(player[0] != NetGetIP())
			NetVarSendToTCP(player[2], PAYLOAD);
}

function network::receive_in_game() {
	var address = 0;
	return NetVarReceiveFrom(channel_game, &address);
}

function network::receive_init() {
	var address = 0;
	return NetVarReceiveFrom(channel_init, &address);
}

function network::receive_from_user(socket) {
	return NetVarReceiveFromTCP(socket);
}

function network::receive_from_manager() {
	return NetVarReceiveFromTCP(socket_tcp);
}