#define MAX_VERT_ROT 		90
#define OFFEST_WIDTH		0 //9
#define OFFEST_HEIGHT		0 //31

#define FIRST_PERSON_VIEW	0
#define THIRD_PERSON_VIEW	1
#define FREE_CAMERA_VIEW	2
#define N_VIEWS				3

var CamPos = [0.0, 30, 30.0];
var CamDir; 

var current_view = FIRST_PERSON_VIEW;
var last_mouse_x = 0.0; 
var last_mouse_y = 0.0;
var last_mouse_z = 0.0;
var last_deltax = 0;
var counter = 0;
var meshRot_x = 0.0;
var meshRot_y = 0.0;
var offset_w = 8;
var offset_h = 30;
var meshRot_y_cumulative = 0.0;
var meshRot_x_cumulative = 0.0;
var rho = 1.2;

function init_camera() {
	if(my_players != void)
		CamDir = my_players.array_player[0].moving_direction;
	else
		CamDir = -CameraGetCurrent().GetDirection();
	CameraGetCurrent().SetPosition(CamPos);
	CameraGetCurrent().SetDirection(CamDir);
}

function CameraMoveMouse() {	
	var	rot_sensitivity = 0.1;			
 	var deltax = Mouse.X;
	var deltay = Mouse.Y;
	
 	SetCursorPos(0.5, 0.5);

	if(deltax != 0)
		deltax = Floor(deltax - (window_w/2) + OFFEST_WIDTH);
	if(deltay != 0)
		deltay = Ceil(deltay - (window_h/2) + OFFEST_HEIGHT);

	meshRot_x_cumulative+= deltax;
	meshRot_y_cumulative+= deltay;

	if(abs(meshRot_y_cumulative) >  MAX_VERT_ROT){
		meshRot_y_cumulative-= deltay;
		deltay -= deltay * rot_sensitivity;
		deltay = 0;
	}

	CameraGetCurrent().RotateGlobal(deltax * rot_sensitivity, 0, 1, 0);
	CameraGetCurrent().RotateLocal (deltay * rot_sensitivity, 1, 0, 0);

	my_players.array_player[0].moving_direction = CameraGetCurrent().GetDirection();
}

function atan2pi(x,y){
	var phi = atan2(x,y);

	if(phi < 0)
		phi = 2*PI - abs(phi);

	return phi;
}

function ComputeView(backside_offset){
	var theta= PI/2 - atan2pi((my_players.array_player[0].moving_direction[0]^2 + my_players.array_player[0].moving_direction[2]^2)^(1/2),my_players.array_player[0].moving_direction[1]);	
	var phi = atan2pi(my_players.array_player[0].moving_direction[0],my_players.array_player[0].moving_direction[2]);

	var thetat = theta * RAD_TO_GRAD;
	var phit = phi * RAD_TO_GRAD;

	var cam_offset = rho*[-sin(theta)*sin(phi),cos(theta),-sin(theta)*cos(phi)];

	my_players.array_player[0].obj_player.setRotation(phit, 0, 1, 0);
	my_players.array_player[0].obj_player.rotate(-thetat, 1, 0, 0);

	CameraGetCurrent().setPosition(my_players.array_player[0].position +cam_offset+backside_offset);
}

function FirstPersonView() {
	var backside_offset = [0,0,0];
	ComputeView(backside_offset);
	CameraMoveMouse();
}

function ThirdPerdonView() {
	var backside_offset = [-my_players.array_player[0].moving_direction[0]*2,1,-my_players.array_player[0].moving_direction[2]*2];
	ComputeView(backside_offset);
	CameraMoveMouse();
}

function FreeCameraView() {
	CameraMoveMouse_MBL_LC();
}

function update_camera() {
	if(my_keyboard.is_pressed(VK_LCONTROL)){
		current_view = (current_view + 1) % N_VIEWS;
		init_camera();
		meshRot_y_cumulative = 0.0;
		meshRot_x_cumulative = 0.0;
    }
    
    switch(current_view) {
    	case FIRST_PERSON_VIEW:
    		FirstPersonView();
    		break;
    	case THIRD_PERSON_VIEW:
    		ThirdPerdonView();
    		break;
    	case FREE_CAMERA_VIEW:
    		CameraGetCurrent().setPosition([30.0, WORLD_SUN_HEIGHT, 30.0]);
    		CameraSetTarget(my_players.array_player[0].position);
    		FreeCameraView();
    		break;
    }
}
