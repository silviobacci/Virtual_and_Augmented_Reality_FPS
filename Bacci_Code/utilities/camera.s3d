#define MAX_VERTICAL_ROTATION_FP 	60
#define MAX_VERTICAL_ROTATION_TP 	30
#define OFFEST_WIDTH				0 //9
#define OFFEST_HEIGHT				0 //31
#define RHO					 		1.2

#define FIRST_PERSON_VIEW			0
#define THIRD_PERSON_VIEW			1
#define FREE_CAMERA_VIEW			2
#define GUNSIGHT_VIEW				3
#define N_VIEWS						2

#define ROTATION_SENSITIVITY		0.05

var current_view = FIRST_PERSON_VIEW;
var previous_view = FIRST_PERSON_VIEW;
var vertical_rotation = 0.0;
var my_camera;

function init_camera() {
	my_camera = CameraGetCurrent();
	my_camera.SetPosition(my_players.array_player[my_players.my_index].position);
	my_camera.SetRotation (0, 1, 1, 1);
	my_camera.RotateGlobal(180 - my_players.array_player[my_players.my_index].angle_direction, 0, 1, 0);
	vertical_rotation = 0.0;
}

function CameraMoveMouse() {	
	var delta_x = Mouse.X;
	var delta_y = Mouse.Y;
	
 	SetCursorPos(0.5, 0.5);

	if(delta_x != 0)
		delta_x = Floor(delta_x - (window_w/2) + OFFEST_WIDTH);
	if(delta_y != 0)
		delta_y = Ceil(delta_y - (window_h/2) + OFFEST_HEIGHT);
		
	delta_x = delta_x * ROTATION_SENSITIVITY;
	delta_y = delta_y * ROTATION_SENSITIVITY;

	vertical_rotation += delta_y;

	if((current_view == FIRST_PERSON_VIEW && abs(vertical_rotation) >  MAX_VERTICAL_ROTATION_FP) || (current_view == THIRD_PERSON_VIEW && abs(vertical_rotation) >  MAX_VERTICAL_ROTATION_TP)){
		vertical_rotation -= delta_y;
		delta_y = 0;
	}

	my_camera.RotateGlobal(delta_x, 0, 1, 0);
	my_camera.RotateLocal (delta_y, 1, 0, 0);
	my_players.array_player[my_players.my_index].angle_direction = (my_players.array_player[my_players.my_index].angle_direction - delta_x) % 360;
	if(my_players.array_player[my_players.my_index].angle_direction < 0)
		my_players.array_player[my_players.my_index].angle_direction = 360 + my_players.array_player[my_players.my_index].angle_direction;
}

function ComputeView(backside_offset){
	var theta = 0;
	var phi = my_players.array_player[my_players.my_index].angle_direction * GRAD_TO_RAD;
	
	var thetat = theta * RAD_TO_GRAD;
	var phit = my_players.array_player[my_players.my_index].angle_direction;
	
	var cam_offset = RHO * [sin(theta)*sin(phi), cos(theta), -sin(theta)*cos(phi)];

	my_players.array_player[my_players.my_index].obj_player.setRotation(phit, 0, 1, 0);
	my_camera.setPosition(my_players.array_player[my_players.my_index].position + cam_offset + backside_offset);
}

function GunsightView() {
	var backside_offset = [my_players.array_player[my_players.my_index].moving_direction.x *2, 0, my_players.array_player[my_players.my_index].moving_direction.z*2];
	ComputeView(backside_offset);
	CameraMoveMouse();
}

function FirstPersonView() {
	var backside_offset = [0,0,0];
	ComputeView(backside_offset);
	CameraMoveMouse();
}

function ThirdPerdonView() {
	var backside_offset = [-my_players.array_player[my_players.my_index].moving_direction.x * 3, 0.5, -my_players.array_player[my_players.my_index].moving_direction.z * 3];
	ComputeView(backside_offset);
	CameraMoveMouse();
}

function FreeCameraView() {
	my_camera.SetPosition([30.0, WORLD_SUN_HEIGHT, 30.0]);
	my_camera.SetTarget(my_players.array_player[my_players.my_index].position);
	my_camera.Free();
	CameraMoveMouse_MBL_LC();
}

function ChangeView() {
	current_view = (current_view + 1) % N_VIEWS;
	init_camera();
}

function aim() {
	if(current_view == FIRST_PERSON_VIEW || current_view == THIRD_PERSON_VIEW) {
		previous_view = current_view;
		current_view = GUNSIGHT_VIEW;
	}
}

function unaim() {
	if(current_view == GUNSIGHT_VIEW)
		current_view = previous_view;
}

function update_camera() {
	if(my_keyboard.is_pressed(VK_LCONTROL))
		ChangeView();
	else if(my_keyboard.is_pressed(VK_M))
		aim();
	else if(!my_keyboard.is_pressed(VK_M))
		unaim();
    
    switch(current_view) {
    	case FIRST_PERSON_VIEW:
    		FirstPersonView();
    		break;
    	case THIRD_PERSON_VIEW:
    		ThirdPerdonView();
    		break;
    	case GUNSIGHT_VIEW:
    		GunsightView();
    		break;
    	case FREE_CAMERA_VIEW:
    		FreeCameraView();
    		break;
    }
}
