function OnUpdate() {
	my_mouse.update();
	my_keyboard.update();
	resolution = get_resolution();
	
	for(var i = 0; i < len(timer_players); i++)
		if(getTime() - timer_players[i][1] > 5 * KEEPALIVE_PDU_PERIOD)
			my_players.remove_player(timer_players[i][0]);
	
	if(my_waiting_menu.update_it)
		my_waiting_menu.update();
	
	if(!my_startup_menu.show_menu && !my_waiting_menu.show_menu)
		my_pause_menu.update();
		
	if(my_pause_menu.show_menu)
		my_pause_menu.check_mouse_position();
		
	if(my_pause_menu.show_menu)
		return;
		
	if(my_waiting_menu.show_menu)
		my_waiting_menu.check_mouse_position();
		
	if(my_startup_menu.show_menu)
		my_startup_menu.check_mouse_position();
		
	if(my_startup_menu.show_menu)
		return;
		
	if(my_waiting_menu.show_menu)
		return;
			
	update_camera();
		
	my_players.update();
	my_map.update(my_players.get_player_position());
	my_player_info.update(my_players.get_me());
	my_gadget.update();
	
	var index = 0;
	foreach(var bullet in enemy_bullets) {
		var type = bullet[0].update_enemy_bullet_info();
		if(type != NOSHOT) {
			adel(enemy_bullets, index);
			aadd(bullet_player_hit, [bullet[1], bullet[0].id, type, N_HIT_PDU]);
			my_score_info.update(bullet[1], type);
			my_players.get_me().life_points -= type + 1;
			var respawn = getTime();
			trace(respawn);
			if(my_players.get_me().life_points == 0)
				//my_players.respawn_player(my_network.my_id);
				my_players.out_of_map();
		}
		index++;
	}
}